{"ast":null,"code":"import fetch from \"isomorphic-fetch\"; //import { API } from \"../config\";\n\nlet API = \"http://localhost:8000\";\nimport queryString from \"query-string\";\nimport { isAuth, handleResponse } from \"./auth\";\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/api/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/api/user/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/api/blogs-categories-tags`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = (slug = undefined) => {\n  return fetch(`${API}/api/blog/${slug}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  return fetch(`${API}/api/blogs/related`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = username => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/api/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/api/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/api/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/api/user/blog/${slug}`;\n  }\n\n  return fetch(`${deleteBlogEndpoint}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/api/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/api/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/chanchalagorale/Documents/react-mongo-next-project/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","handleResponse","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","catch","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","singleBlog","slug","undefined","listRelated","list","username","listBlogsEndpoint","removeBlog","deleteBlogEndpoint","updateBlog","updateBlogEndpoint"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-fetch\";\n//import { API } from \"../config\";\n\nlet API = \"http://localhost:8000\";\nimport queryString from \"query-string\";\nimport { isAuth, handleResponse } from \"./auth\";\n\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/api/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/api/user/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: blog,\n  })\n    .then((response) => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip,\n  };\n  return fetch(`${API}/api/blogs-categories-tags`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const singleBlog = (slug = undefined) => {\n  return fetch(`${API}/api/blog/${slug}`, {\n    method: \"GET\",\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const listRelated = (blog) => {\n  return fetch(`${API}/api/blogs/related`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(blog),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const list = (username) => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/api/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/api/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: \"GET\",\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const removeBlog = (slug, token) => {\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/api/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/api/user/blog/${slug}`;\n  }\n\n  return fetch(`${deleteBlogEndpoint}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  })\n    .then((response) => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/api/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/api/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: blog,\n  })\n    .then((response) => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch((err) => console.log(err));\n};\n"]},"metadata":{},"sourceType":"module"}