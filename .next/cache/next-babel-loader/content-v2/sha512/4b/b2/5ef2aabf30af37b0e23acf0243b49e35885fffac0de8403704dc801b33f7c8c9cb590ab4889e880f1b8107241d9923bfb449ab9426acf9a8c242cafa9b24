{"ast":null,"code":"import fetch from \"isomorphic-fetch\";\nimport { API } from \"../config\";\nimport queryString from \"query-string\";\nimport { isAuth, handleResponse } from \"./auth\";\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/api/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/api/user/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/api/blogs-categories-tags`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = (slug = undefined) => {\n  return fetch(`${API}/api/blog/${slug}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  return fetch(`${API}/api/blogs/related`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = username => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/api/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/api/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/api/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/api/user/blog/${slug}`;\n  }\n\n  return fetch(`${deleteBlogEndpoint}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/api/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/api/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listSearch = params => {\n  console.log(\"search params\", params);\n  let query = queryString.stringify(params);\n  console.log(\"query params\", query);\n  return fetch(`${API}/api/blogs/search?${query}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":null,"metadata":{},"sourceType":"module"}